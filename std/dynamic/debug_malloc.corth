include "linux_x86/sys.corth"
include "linux_x86/io/output.corth"
include "dynamic/_malloc.corth"


// Can be used to debug malloc segments.
proc debug-dynamic-memory
  file-desc ->
  // Prints the blocks of the memory for debug purposes.
in let  log-stream in
  "Reached debug-dynamic-memory.\n" log-stream fputs
  "--------------------\n" log-stream fputs
  "Available blocks table:\n" log-stream fputs
  0 while dup malloc:avail-stack-length @64 < do let i in
    i log-stream fputi ". 0x" log-stream fputs i malloc:avail-stack stack64:get log-stream fputx " (size: 0x" log-stream fputs i malloc:avail-stack stack64:get malloc:block-size log-stream fputx ")\n" log-stream fputs
  i end inc end drop
  "--------------------\n" log-stream fputs
  "Blocks:\n" log-stream fputs
  malloc:array while dup malloc:array malloc:ARRAY-SIZE + < do let block in
    block malloc:next-block block <= if
      "Block at 0x" log-stream fputs block log-stream fputx " points to itself or backwards, stopping iteration.\n" log-stream fputs
      block break
    end

    block malloc:avail-stack-array malloc:avail-stack-array malloc:avail-stack-length @64 8 * + sorted64:available if
      "#"
    else
      "@"
    end log-stream fputs drop

    " 0x" log-stream fputs
    block log-stream fputx
    " -> 0x" log-stream fputs
    block malloc:next-block log-stream fputx
    " (" log-stream fputs
    block malloc:block-size log-stream fputu
    ", " log-stream fputs
    block malloc:container-size log-stream fputu
    ")\n" log-stream fputs
  block malloc:next-block end end drop
  "--------------------\n" log-stream fputs
  "End of debug-dynamic-memory.\n" log-stream fputs
end end


// Can be used to debug malloc segments.
proc check-dynamic-memory-integrity
  -> bool
  // Returns false if there are any problems with malloc:array.
in
  malloc:array while dup malloc:array malloc:ARRAY-SIZE + < do let block in
    block malloc:next-block block <= if false return end
  block malloc:next-block end end drop
true end


// Can be used to check the space available and to check memory leaks.
proc get-available-dynamic-memory
  -> int
in
  memory sum sizeof(int) in
    0 sum !64

    0 while dup malloc:avail-stack-length @64 < do let i in
      i malloc:avail-stack stack64:get malloc:block-size sum @64 + sum !64
    i end inc end drop

    sum @64
  end
end

macro malloc:init malloc:_init endmacro

// This returns a shifted pointer.
// The created dynamicly-placed object contains debug tag information which is hidden from the user.
macro malloc let _size_ _debug_ in
  size 8 + _malloc peek _obj_ in _obj_ isn-null if
    _debug_ _obj_ !64
  end end 8 +
end endmacro
macro mfree       8 - _mfree       endmacro
macro mfree-deep  _mfree-deep      endmacro
macro mlength     8 - _mlength 8 - endmacro

macro debug-malloc:get-tag 8 - @64 endmacro
macro debug-malloc:set-tag 8 - !64 endmacro

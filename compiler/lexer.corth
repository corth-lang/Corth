include "enums.corth"
include "debug.corth"


proc fgets-keep
  // ptr: start int: length file-desc: file-desc
  ptr int file-desc -> int
  // Reads a region of a file stream and returns file pointer to its original position.
in let start length file in
  // Get original position.
  file ftell let original in

    // Read bytes and return the total bytes read.
    start length file fgets

    // Return the file pointer to its original pointer.
    file original SEEK-WHENCE:SET lseek drop
  end
end end


proc strip-file
  // file-desc: file -> bool: reached-eof
  file-desc -> bool
  // Removes the newline and spaces from the start of a file stream
  // Also, checks if EOF is reached.
in let file in
  memory char 1 in
    while true do
      // If EOF is reached, return immediately.
      char 1 file fgets is-zero if true return end

      // If a null-terminator is reached, return immediately.
      char @8 is-zero if true return end

      char @8 '\n' != if
        char @8 ' ' != if
          file -1 SEEK-WHENCE:CUR lseek drop
          false return
        end
      end
    end
  end
end false end  // dummy return


proc parse-next-token
  // file-desc: file ptr: buffer ptr: buffer-end -> ptr: log-item
  file-desc ptr ptr -> ptr
  // Gets the next token string before any newline or space and fills a buffer.
  // NOTE: If buffer-end exceeds buffer + TOKEN-MAX-LENGTH, creates an assertion.
in let file buffer buffer-end in
  while true do
    // Reached EOF.
    buffer-end @64 1 file fgets-keep is-zero if NULLPTR return end

    // Reached a newline character.
    buffer-end @64 @8 '\n' = if NULLPTR return end

    // Reached a space character.
    buffer-end @64 @8 ' ' = if NULLPTR return end

    buffer-end @64 buffer - TOKEN-MAX-LENGTH >= if
      // Reached the end of the buffer.
      LOG-TYPE:TOKEN-TOO-LONG generate-log0 return
    end

    // There is still space in the buffer.
    file 1 SEEK-WHENCE:CUR lseek drop
    buffer-end @inc64
  end
end NULLPTR end // dummy


proc parse-escape-sequence
  // file-desc: file -> int: escape-character ptr: log-item
  file-desc -> int ptr
in let file in
  // Buffer is 2 bytes because after \x, 2 new bytes are required.
  memory buffer 2 in
    // Check if we reached EOF before an escape sequence.
    buffer 1 file fgets is-zero if
      0 LOG-TYPE:REACHED-EOF generate-log0 return
    end

    // Get the mapping of the escape character.
         buffer @8 '0'  = if '\0'
    else buffer @8 'n'  = if '\n'
    else buffer @8 't'  = if '\t'
    else buffer @8 '\'' = if '\''
    else buffer @8 '\"' = if '\"'
    else buffer @8 '\\' = if '\\'
    else
      buffer @8 'x' != if
        0 LOG-TYPE:NOT-ESCAPE-CHAR generate-log0 return
      end

      // Check if we reached EOF before the escape sequence ends.
      buffer 2 file fgets 2 < if
        0 LOG-TYPE:REACHED-EOF generate-log0 return
      end

      // Get the hexadecimal value after '\x'.
      memory number sizeof(int) in
        buffer 2 number convx ! if
          0 LOG-TYPE:NOT-HEX-DIGIT generate-log0 return
        end

        // Return the hexadecimal number.
        number @64
      end
    end end end end end end NULLPTR
  end
end end


proc parse-next-string
  // file-desc: file ptr: buffer ptr: buffer-end -> ptr: log-item
  file-desc ptr ptr -> ptr
  // Gets the next string before a double quote.
  // NOTE: If buffer-end exceeds buffer + TOKEN-MAX-LENGTH, creates an assertion.
  // NOTE: If EOF is reached before a double quote is found, creates an assertion.
in let file buffer buffer-end in
  while true do buffer-end @64 let char-addr in

    // Check if we reached EOF before an end of string.
    char-addr 1 file fgets is-zero if
      LOG-TYPE:REACHED-EOF generate-log0 LOG-TYPE:INV-STR-LIT generate-log1 return
    end

    // Check if we reached the end of the string.
    char-addr @8 '"' = if
      0 buffer-end @64 !8
      buffer-end @inc64
      NULLPTR return
    end

    // Reached the end of the buffer.
    char-addr buffer - TOKEN-MAX-LENGTH dec >= if
      LOG-TYPE:TOKEN-TOO-LONG generate-log0 LOG-TYPE:INV-STR-LIT generate-log1 return
    end

    char-addr @8 '\\' = if
      // Reached a backslash, check for escape sequence.
      file parse-escape-sequence let log-item in log-item isn-null if drop log-item return end end
      char-addr !8
    end

    buffer-end @inc64
  end end
NULLPTR end end


proc skip-line
  // file-desc: file-desc ->
  file-desc ->
  // Moves the file pointer until it passes a newline, or EOF is reached.
in let file in
  memory char 1 in
    while true do
      // If EOF is reached, return immediately.
      char 1 file fgets is-zero if return end

      // If a newline character is reached, return immediately.
      char @8 '\n' = if return end
    end
  end
end end


proc skip-block-comment
  // file-desc: file-desc -> ptr: log-item
  file-desc -> ptr
  // Moves the file pointer until it passes a block comment end, or EOF is reached.
  // Keeps track of the line and char number as the bytes are read.
in let file in
  memory char 1 in
    while true do
      char 1 file fgets is-zero if
        // Reached EOF.
        LOG-TYPE:REACHED-EOF generate-log0 return
      end

      char @8 '*' = if
        // Reached asterisk.

        // Check if reached EOF while expecting a block comment end.
        char 1 file fgets is-zero if LOG-TYPE:REACHED-EOF generate-log0 return end

        // Reached block comment end.
        char @8 '/' = if NULLPTR return end
      end
    end
  end
NULLPTR end end


proc create-name-token
  // ptr: file-name file-desc: file-desc
  ptr file-desc
  // int: start-position
  int
  // ptr: buffer ptr: buffer-end
  ptr ptr ->
  // int: token-type ptr: address [int|ptr]: arg ptr: log-item
  int ptr int ptr

  // Checks if the name is a keyword or an intrinsic, and creates a new token.
in let file-name file start-position buffer buffer-end in
  // Get full token.
  file buffer buffer-end parse-next-token dup isn-null if
    let log-item in TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item end return
  end drop

  buffer-end @64 buffer - let buffer-size in
    // Check if the token is a keyword.
    // I hate my life.
         buffer buffer-size KEYWORD-NAME:INCLUDE       memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:INCLUDE
    else buffer buffer-size KEYWORD-NAME:MACRO         memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:MACRO
    else buffer buffer-size KEYWORD-NAME:ENDMACRO      memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:ENDMACRO
    else buffer buffer-size KEYWORD-NAME:NAMESPACE     memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:NAMESPACE
    else buffer buffer-size KEYWORD-NAME:ENDNAMESPACE  memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:ENDNAMESPACE
    else buffer buffer-size KEYWORD-NAME:PROC          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:PROC
    else buffer buffer-size KEYWORD-NAME:END           memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:END
    else buffer buffer-size KEYWORD-NAME:RETURN        memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:RETURN
    else buffer buffer-size KEYWORD-NAME:RETURNS       memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:RETURNS
    else buffer buffer-size KEYWORD-NAME:MEMORY        memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:MEMORY
    else buffer buffer-size KEYWORD-NAME:AND           memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:AND
    else buffer buffer-size KEYWORD-NAME:IN            memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:IN
    else buffer buffer-size KEYWORD-NAME:LET           memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:LET
    else buffer buffer-size KEYWORD-NAME:PEEK          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:PEEK
    else buffer buffer-size KEYWORD-NAME:IF            memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:IF
    else buffer buffer-size KEYWORD-NAME:ELSE          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:ELSE
    else buffer buffer-size KEYWORD-NAME:WHILE         memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:WHILE
    else buffer buffer-size KEYWORD-NAME:DO            memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:DO
    else buffer buffer-size KEYWORD-NAME:BREAK         memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:BREAK
    else buffer buffer-size KEYWORD-NAME:CAST          memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:CAST
    else buffer buffer-size KEYWORD-NAME:SIZEOF        memcmp8-wl is-zero if TOKEN-TYPE:KEYWORD KEYWORD:SIZEOF

    // I still hate my life.
    else buffer buffer-size INTRINSIC-NAME:ADD         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:ADD
    else buffer buffer-size INTRINSIC-NAME:SUB         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SUB
    else buffer buffer-size INTRINSIC-NAME:MUL         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:MUL
    else buffer buffer-size INTRINSIC-NAME:MUL2        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:MUL2
    else buffer buffer-size INTRINSIC-NAME:DIV         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:DIV
    else buffer buffer-size INTRINSIC-NAME:MOD         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:MOD
    else buffer buffer-size INTRINSIC-NAME:BOR         memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BOR
    else buffer buffer-size INTRINSIC-NAME:BAND        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BAND
    else buffer buffer-size INTRINSIC-NAME:BXOR        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BXOR
    else buffer buffer-size INTRINSIC-NAME:BNOT        memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:BNOT
    else buffer buffer-size INTRINSIC-NAME:LOAD8       memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD8
    else buffer buffer-size INTRINSIC-NAME:STORE8      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE8
    else buffer buffer-size INTRINSIC-NAME:LOAD16      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD16
    else buffer buffer-size INTRINSIC-NAME:STORE16     memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE16
    else buffer buffer-size INTRINSIC-NAME:LOAD32      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD32
    else buffer buffer-size INTRINSIC-NAME:STORE32     memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE32
    else buffer buffer-size INTRINSIC-NAME:LOAD64      memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:LOAD64
    else buffer buffer-size INTRINSIC-NAME:STORE64     memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:STORE64
    else buffer buffer-size INTRINSIC-NAME:SYSCALL0    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL0
    else buffer buffer-size INTRINSIC-NAME:SYSCALL1    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL1
    else buffer buffer-size INTRINSIC-NAME:SYSCALL2    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL2
    else buffer buffer-size INTRINSIC-NAME:SYSCALL3    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL3
    else buffer buffer-size INTRINSIC-NAME:SYSCALL4    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL4
    else buffer buffer-size INTRINSIC-NAME:SYSCALL5    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL5
    else buffer buffer-size INTRINSIC-NAME:SYSCALL6    memcmp8-wl is-zero if TOKEN-TYPE:INTRINSIC INTRINSIC:SYSCALL6

    else buffer buffer-size INT-TYPE-NAME:INT          memcmp8-wl is-zero if TOKEN-TYPE:INT-TYPE INT-TYPE:INT
    else buffer buffer-size INT-TYPE-NAME:BOOL         memcmp8-wl is-zero if TOKEN-TYPE:INT-TYPE INT-TYPE:BOOL

    else
      // Return token type and argument.
      TOKEN-TYPE:NAME buffer buffer-size to-dynamic8

    // This is nightmare fuel.
    end end end end end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end end end end end

    let token-type token-arg in
      // Return token type, address and argument.
      file-name NULLPTR start-position file ftell generate-address let address in
        address is-null if
          TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 return
        end

        token-type address token-arg NULLPTR
      end
    end
  end
end end


proc create-preprocessor-token
  // ptr: file-name file-desc: file-desc
  ptr file-desc
  // int: start-position
  int
  // ptr: buffer ptr: buffer-end
  ptr ptr ->
  // int: token-type ptr: address [int|ptr]: arg ptr: log-item
  int ptr int ptr

  // Checks if the name is a preprocessor and creates a new preprocessor token.
  // After the keyword and intrinsic checks, macros are checked for any match. If there is any macro with the same name, the macro tokens are loaded to a buffer.
in let file-name file start-position buffer buffer-end in
  // Get full token.
  file buffer buffer-end parse-next-token dup isn-null if
    let log-item in TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item end return
  end drop

  buffer-end @64 buffer - let buffer-size in
    // Check if the token is a preprocessor directive.
         buffer buffer-size PREPROC-NAME:END   memcmp8-wl is-zero if PREPROC:END
    else buffer buffer-size PREPROC-NAME:IFDEF memcmp8-wl is-zero if PREPROC:IFDEF
    else
      // FUCKING UNREACHABLE CODE EXCEPTIONS!!!
      true if
        // Generate the address of the token.
        file-name NULLPTR start-position file ftell generate-address let address in
          address is-null if
            TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 return
          end

          // Return error as the token string was not a preprocessor directive.
          TOKEN-TYPE:UNKNOWN NULLPTR 0 address LOG-TYPE:NOT-A-PREPROC generate-log1 return
        end
      end PREPROC:UNKNOWN
    end end

    let token-arg in
      // Return token type, address and argument.
      file-name NULLPTR start-position file ftell generate-address let address in
        address is-null if
          TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 return
        end

        TOKEN-TYPE:PREPROC address token-arg NULLPTR
      end
    end
  end
end end


proc get-next-token
  // ptr: file-name file-desc: file-desc
  ptr file-desc
  // ptr: extended-tokens-array ptr: extended-tokens-start-index ptr: extended-tokens-end-index
  ptr ptr ptr
  // ptr: macro-names ptr: macro-tokens ptr: macros-length
  ptr ptr ptr
  // bool: extend-macros --
  bool ->
  // int: token-type ptr: address [int|ptr]: arg ptr: log-item bool: is-available
  int ptr int ptr bool

  // Generates a token and returns.
  // If reaches EOF, does not return a log-item, but sets the is-available to false.
  // NOTE: If there is no token available, every other parameter is either NULLPTR or invalid.
in let
  file-name file
  extended-array extended-start extended-end
  macro-names macro-tokens macros-length
  extend-macros
in
  extended-end @64 extended-start @64 - let extended-length in
    // If there are remaining tokens in the extended queue, return the remaining item.
    extended-length isn-zero if
      extended-length 3 % isn-zero if
        TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:EXT-LEN-INVALID generate-log0 false return
      end

      extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:pop-first
      extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:pop-first
      extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:pop-first

    else
      memory buffer     TOKEN-MAX-LENGTH and
             buffer-end sizeof(int)      in

        file strip-file if
          TOKEN-TYPE:UNKNOWN NULLPTR 0 NULLPTR false return
        end

        buffer buffer-end !64

        file ftell let start-position in
          buffer 1 file fgets drop
          buffer-end @inc64

          buffer @8 '#' = if
            // -------- Preprocessor directive type --------

            // Get the full token.
            file buffer buffer-end parse-next-token dup isn-null if
              let log-item in
                TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item false
              end return
            end drop

            // Generate the address object.
            file-name NULLPTR start-position file ftell generate-address let address in
              address is-null if TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 false return end

              // Create the preprocessor token.
              // NOTE: Remove the first character (#) by shifting the buffer pointer once.
              file-name file start-position buffer inc buffer-end create-preprocessor-token dup isn-null if false return end drop
            end

          else buffer @8 is-ddigit if
            // -------- Integer type --------

            // Get full token.
            file buffer buffer-end parse-next-token dup isn-null if
              let log-item in
                TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item false
              end return
            end drop

            file-name NULLPTR start-position file ftell generate-address let address in
              address is-null if TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 false return end

              memory number sizeof(int) in
                buffer buffer-end @64 buffer - number convint ! if
                  TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:INV-INT-LIT generate-log0 address LOG-TYPE:SYNTAX-ERROR generate-log2 false return
                end

                TOKEN-TYPE:INTEGER address number @64
              end
            end

          else buffer @8 '\'' = if
            // -------- Characters --------
            // TODO: Add multpile character pushing.

            buffer inc 1 file fgets is-zero if
              // Reached EOF while expecting a character.
              TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:REACHED-EOF generate-log0 false return
            end

            // Get the character
            buffer inc @8 let character in
              character '\n' = if TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:REACHED-EOL generate-log0 false return end
              character '\'' = if TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:INV-CHAR-LIT generate-log0 false return end

              character '\\' = if
                // Return the escape sequence character.
                file parse-escape-sequence dup isn-null if
                  let log-item in drop TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item false end return
                end drop
              else
                // Return the character itself.
                character
              end
            end

            let character in
              buffer 1 file fgets is-zero if
                // Reached EOF while expecting a single quote.
                TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:REACHED-EOF generate-log0 false return
              end

              buffer @8 '\'' != if
                // Was expecting a single quote, but found another character.
                TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:INV-CHAR-LIT generate-log0 false return
              end

              // Return token type, address and argument.
              file-name NULLPTR start-position file ftell generate-address let address in
                address is-null if
                  TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 false return
                end

                TOKEN-TYPE:INTEGER address character
              end
            end

          else buffer @8 '"' = if
            // -------- String type --------

            // Move the buffer-end left once, so the quote is removed.
            buffer-end @dec64

            // Get full string.
            file buffer buffer-end parse-next-string dup isn-null if
              let log-item in TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item false end return
            end drop

            // Return token type, address and argument.
            file-name NULLPTR start-position file ftell generate-address let address in
              address is-null if
                TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 false return
              end

              TOKEN-TYPE:STRING address buffer buffer-end @64 buffer - to-dynamic8
            end

          else buffer @8 '-' = if
            // -------- Dash (Integers and names) --------

            buffer inc 1 file fgets is-zero if
              TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:REACHED-EOF generate-log0 false return
            end

            buffer-end @inc64

            buffer inc @8 is-ddigit if
              // Get full token.
              file buffer buffer-end parse-next-token dup isn-null if
                let log-item in TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item false end return
              end drop

              // Return token type, address and argument.
              file-name NULLPTR start-position file ftell generate-address let address in
                address is-null if
                  TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:MALLOC-FAILED generate-log0 false return
                end

                memory number sizeof(int) in
                  buffer buffer-end @64 buffer - number convint ! if
                    TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:INV-INT-LIT generate-log0 address LOG-TYPE:SYNTAX-ERROR generate-log2 false return
                  end

                  TOKEN-TYPE:INTEGER address number @64
                end
              end

            else
              file -1 SEEK-WHENCE:CUR lseek drop

              buffer-end @dec64

              file-name file start-position buffer buffer-end create-name-token dup isn-null if false return end drop
            end

          else buffer @8 '/' = if
            // -------- Slash (Name and comments) --------

            buffer inc 1 file fgets is-zero if
              TOKEN-TYPE:UNKNOWN NULLPTR 0 LOG-TYPE:REACHED-EOF generate-log0 false return
            end

            buffer inc @8 '/' = if
              // -------- Single line comment --------

              // Skip this line.
              file skip-line

              // Get next token and return it.
              file-name file extended-array extended-start extended-end macro-names macro-tokens macros-length extend-macros get-next-token ! if false return end drop

            else buffer inc @8 '*' = if
              // -------- Block comment --------

              // Skip the block comment.
              file skip-block-comment let log-item in log-item isn-null if
                TOKEN-TYPE:UNKNOWN NULLPTR 0 log-item false return
              end end

              // Get next token and return it.
              file-name file extended-array extended-start extended-end macro-names macro-tokens macros-length extend-macros get-next-token ! if false return end drop
            else
              // -------- Name and keyword types --------
              file -1 SEEK-WHENCE:CUR lseek drop

              file-name file start-position buffer buffer-end create-name-token dup isn-null if false return end drop
            end end

          else
            // -------- Name and keyword types --------
            file-name file start-position buffer buffer-end create-name-token dup isn-null if false return end drop
          end end end end end end
        end
      end
    end

    // If macros should not be extended, return immediately.
    extend-macros ! if NULLPTR true return end

    // If macros should be extended, check if the token is a macro call.
    let type address arg in
      type TOKEN-TYPE:NAME = if
        arg macro-names macro-tokens macros-length str-map64:get-dstr if
          let tokens in
            tokens tokens mlength + while dup tokens > do 24 - let i in
              i @64 i 8 + @64 i 16 + @64 let token-type token-address token-argument in
                // -- Token argument --
                // If the type of the token is a 'name' or a 'string', we need to copy the argument.
                token-argument token-type TOKEN-TYPE:NAME = token-type TOKEN-TYPE:STRING = | if dcopy end
                extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:append-first

                // -- Token address --
                // Change the addr:prev of the address.
                address token-address addr:prev !64
                token-address dcopy extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:append-first

                // -- Token type --
                token-type extended-array EXTENDED-MAX-LENGTH extended-start extended-end deque64:append-first
              end
            i end end drop

            file-name file extended-array extended-start extended-end macro-names macro-tokens macros-length extend-macros get-next-token

            // Deallocate 'arg'.
            arg mfree drop
          end
        else drop
          type address arg NULLPTR true
        end
      else
        type address arg NULLPTR true
      end
    end
  end
end end


proc expect-next-token
  // ptr: file-name file-desc: file-desc
  ptr file-desc
  // ptr: extended-tokens-array ptr: extended-tokens-start-index ptr: extended-tokens-end-index
  ptr ptr ptr
  // ptr: macro-names ptr: macro-tokens ptr: macros-length
  ptr ptr ptr
  // bool: extend-macros --
  bool ->
  // int: token-type ptr: address [int|ptr]: arg ptr: log-item
  int ptr int ptr

  // Generates a token and returns.
  // Expects to find a new token, if can not find will create a log item indicating that.
in
  get-next-token if return end

  dup is-null if drop LOG-TYPE:REACHED-EOF generate-log0 end LOG-TYPE:NO-TOKEN generate-log1
end

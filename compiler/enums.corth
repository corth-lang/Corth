include "linux_x86/io/output.corth"
include "core/arithmetic.corth"

// TODO: Change these arrays with vectors.
macro GLOBALS-MAX-COUNT   0x8000     endmacro
macro MACROS-MAX-COUNT    0x8000     endmacro
macro PROCS-MAX-COUNT     0x8000     endmacro
macro LET-MAX-COUNT       0x8000     endmacro
macro LOCALS-MAX-COUNT    0x8000     endmacro

macro EXTENDED-MAX-LENGTH 0x80000    endmacro
macro TOKEN-MAX-LENGTH    0x8000     endmacro
macro STACK-MAX-ITEMS     0x8000     endmacro

macro LOCAL-MEMORY-SIZE   0x80000    endmacro
macro CALL-STACK-SIZE     0x80000    endmacro

macro OUTPUT-STREAM-SIZE  0x100000   endmacro

// Type IDs
namespace TOKEN-TYPE
macro UNKNOWN   0 endmacro
macro PREPROC   1 endmacro
macro NAME      2 endmacro
macro INTEGER   3 endmacro
macro KEYWORD   4 endmacro
macro INTRINSIC 5 endmacro
macro STRING    6 endmacro
macro INT-TYPE  7 endmacro
endnamespace

// Type strings
namespace TOKEN-TYPE-NAME
macro UNKNOWN   "<unknown>" endmacro
macro PREPROC   "preproc"   endmacro
macro NAME      "name"      endmacro
macro INTEGER   "integer"   endmacro
macro KEYWORD   "keyword"   endmacro
macro INTRINSIC "intrinsic" endmacro
macro STRING    "string"    endmacro
macro INT-TYPE  "int-type"  endmacro
endnamespace

// Preprocessor directive IDs
namespace PREPROC
macro UNKNOWN 0 endmacro
macro END     1 endmacro
macro IFDEF   2 endmacro
endnamespace

// Preprocessor directive strings
namespace PREPROC-NAME
macro UNKNOWN "<unknown>" endmacro
macro END     "end"       endmacro
macro IFDEF   "ifdef"     endmacro
endnamespace

// Keyword IDs
namespace KEYWORD
macro UNKNOWN      0  endmacro
macro MACRO        1  endmacro
macro ENDMACRO     2  endmacro
macro PROC         3  endmacro
macro RETURNS      4  endmacro
macro IN           5  endmacro
macro END          6  endmacro
macro RETURN       7  endmacro
macro MEMORY       8  endmacro
macro AND          9  endmacro
macro LET          10 endmacro
macro PEEK         11 endmacro
macro IF           12 endmacro
macro ELSE         13 endmacro
macro WHILE        14 endmacro
macro DO           15 endmacro
macro BREAK        16 endmacro
macro INCLUDE      17 endmacro
macro CAST         18 endmacro
macro SIZEOF       19 endmacro
macro NAMESPACE    20 endmacro
macro ENDNAMESPACE 21 endmacro
endnamespace

// Keyword strings
namespace KEYWORD-NAME
macro UNKNOWN      "<unknown>"    endmacro
macro MACRO        "macro"        endmacro
macro ENDMACRO     "endmacro"     endmacro
macro PROC         "proc"         endmacro
macro END          "end"          endmacro
macro RETURN       "return"       endmacro
macro RETURNS      "->"           endmacro
macro MEMORY       "memory"       endmacro
macro AND          "and"          endmacro
macro IN           "in"           endmacro
macro LET          "let"          endmacro
macro PEEK         "peek"         endmacro
macro IF           "if"           endmacro
macro ELSE         "else"         endmacro
macro WHILE        "while"        endmacro
macro DO           "do"           endmacro
macro BREAK        "break"        endmacro
macro INCLUDE      "include"      endmacro
macro CAST         "cast"         endmacro
macro SIZEOF       "sizeof"       endmacro
macro NAMESPACE    "namespace"    endmacro
macro ENDNAMESPACE "endnamespace" endmacro
endnamespace

// Intrinsic IDs
namespace INTRINSIC
macro UNKNOWN  0  endmacro
macro ADD      1  endmacro
macro SUB      2  endmacro
macro MUL      3  endmacro
macro MUL2     4  endmacro
macro DIV      5  endmacro
macro MOD      6  endmacro
macro BOR      14 endmacro
macro BAND     15 endmacro
macro BXOR     16 endmacro
macro BNOT     17 endmacro
macro LOAD8    18 endmacro
macro STORE8   19 endmacro
macro LOAD16   20 endmacro
macro STORE16  21 endmacro
macro LOAD32   22 endmacro
macro STORE32  23 endmacro
macro LOAD64   24 endmacro
macro STORE64  25 endmacro
macro SYSCALL0 26 endmacro
macro SYSCALL1 27 endmacro
macro SYSCALL2 28 endmacro
macro SYSCALL3 29 endmacro
macro SYSCALL4 30 endmacro
macro SYSCALL5 31 endmacro
macro SYSCALL6 32 endmacro
endnamespace

// Intrinsic strings
namespace INTRINSIC-NAME
macro UNKNOWN  "<unknown>" endmacro
macro ADD      "+"         endmacro
macro SUB      "-"         endmacro
macro MUL      "*"         endmacro
macro MUL2     "*2"        endmacro
macro DIV      "/"         endmacro
macro MOD      "%"         endmacro
macro BOR      "||"        endmacro
macro BAND     "&&"        endmacro
macro BXOR     "^^"        endmacro
macro BNOT     "!!"        endmacro
macro LOAD8    "@8"        endmacro
macro STORE8   "!8"        endmacro
macro LOAD16   "@16"       endmacro
macro STORE16  "!16"       endmacro
macro LOAD32   "@32"       endmacro
macro STORE32  "!32"       endmacro
macro LOAD64   "@64"       endmacro
macro STORE64  "!64"       endmacro
macro SYSCALL0 "syscall0"  endmacro
macro SYSCALL1 "syscall1"  endmacro
macro SYSCALL2 "syscall2"  endmacro
macro SYSCALL3 "syscall3"  endmacro
macro SYSCALL4 "syscall4"  endmacro
macro SYSCALL5 "syscall5"  endmacro
macro SYSCALL6 "syscall6"  endmacro
endnamespace

// Intrinsic type IDs
namespace INT-TYPE
macro INT     1 endmacro
macro BOOL    2 endmacro
endnamespace

// Intrinsic type strings
namespace INT-TYPE-NAME
macro UNKNOWN "<unknown>" endmacro
macro INT     "int"       endmacro
macro BOOL    "bool"      endmacro
endnamespace

// Intrinsic type sizes
namespace INT-TYPE-SIZE
macro UNKNOWN    -1 endmacro
macro INT         8 endmacro
macro BOOL        8 endmacro
endnamespace

proc get-type-name
  // int: type -> ptr: type-name-ptr int: type-name-length
  int -> ptr int
in let type in
       type TOKEN-TYPE:NAME      = if TOKEN-TYPE-NAME:NAME
  else type TOKEN-TYPE:INTEGER   = if TOKEN-TYPE-NAME:INTEGER
  else type TOKEN-TYPE:KEYWORD   = if TOKEN-TYPE-NAME:KEYWORD
  else type TOKEN-TYPE:INTRINSIC = if TOKEN-TYPE-NAME:INTRINSIC
  else type TOKEN-TYPE:STRING    = if TOKEN-TYPE-NAME:STRING
  else type TOKEN-TYPE:INT-TYPE  = if TOKEN-TYPE-NAME:INT-TYPE
  else                                TOKEN-TYPE-NAME:UNKNOWN
  end end end end end end
end end

proc get-keyword-name
  // int: keyword -> ptr: keyword-name-ptr int: keyword-name-length
  int -> ptr int
in let keyword in
       keyword KEYWORD:INCLUDE      = if KEYWORD-NAME:INCLUDE
  else keyword KEYWORD:MACRO        = if KEYWORD-NAME:MACRO
  else keyword KEYWORD:ENDMACRO     = if KEYWORD-NAME:ENDMACRO
  else keyword KEYWORD:NAMESPACE    = if KEYWORD-NAME:NAMESPACE
  else keyword KEYWORD:ENDNAMESPACE = if KEYWORD-NAME:ENDNAMESPACE
  else keyword KEYWORD:PROC         = if KEYWORD-NAME:PROC
  else keyword KEYWORD:END          = if KEYWORD-NAME:END
  else keyword KEYWORD:RETURN       = if KEYWORD-NAME:RETURN
  else keyword KEYWORD:RETURNS      = if KEYWORD-NAME:RETURNS
  else keyword KEYWORD:MEMORY       = if KEYWORD-NAME:MEMORY
  else keyword KEYWORD:AND          = if KEYWORD-NAME:AND
  else keyword KEYWORD:IN           = if KEYWORD-NAME:IN
  else keyword KEYWORD:LET          = if KEYWORD-NAME:LET
  else keyword KEYWORD:PEEK         = if KEYWORD-NAME:PEEK
  else keyword KEYWORD:IF           = if KEYWORD-NAME:IF
  else keyword KEYWORD:ELSE         = if KEYWORD-NAME:ELSE
  else keyword KEYWORD:WHILE        = if KEYWORD-NAME:WHILE
  else keyword KEYWORD:DO           = if KEYWORD-NAME:DO
  else keyword KEYWORD:BREAK        = if KEYWORD-NAME:BREAK
  else keyword KEYWORD:SIZEOF       = if KEYWORD-NAME:SIZEOF
  else                                   KEYWORD-NAME:UNKNOWN
  end end end end end end end end end end end end end end end end end end end end
end end

proc get-intrinsic-name
  // int: intrinsic -> ptr: intrinsic-name-ptr int: intrinsic-name-length
  int -> ptr int
in let intrinsic in
       intrinsic INTRINSIC:ADD      = if INTRINSIC-NAME:ADD
  else intrinsic INTRINSIC:SUB      = if INTRINSIC-NAME:SUB
  else intrinsic INTRINSIC:MUL      = if INTRINSIC-NAME:MUL
  else intrinsic INTRINSIC:DIV      = if INTRINSIC-NAME:DIV
  else intrinsic INTRINSIC:MOD      = if INTRINSIC-NAME:MOD
  else intrinsic INTRINSIC:BOR      = if INTRINSIC-NAME:BOR
  else intrinsic INTRINSIC:BAND     = if INTRINSIC-NAME:BAND
  else intrinsic INTRINSIC:BXOR     = if INTRINSIC-NAME:BXOR
  else intrinsic INTRINSIC:BNOT     = if INTRINSIC-NAME:BNOT
  else intrinsic INTRINSIC:LOAD8    = if INTRINSIC-NAME:LOAD8
  else intrinsic INTRINSIC:STORE8   = if INTRINSIC-NAME:STORE8
  else intrinsic INTRINSIC:LOAD16   = if INTRINSIC-NAME:LOAD16
  else intrinsic INTRINSIC:STORE16  = if INTRINSIC-NAME:STORE16
  else intrinsic INTRINSIC:LOAD32   = if INTRINSIC-NAME:LOAD32
  else intrinsic INTRINSIC:STORE32  = if INTRINSIC-NAME:STORE32
  else intrinsic INTRINSIC:LOAD64   = if INTRINSIC-NAME:LOAD64
  else intrinsic INTRINSIC:STORE64  = if INTRINSIC-NAME:STORE64
  else intrinsic INTRINSIC:SYSCALL0 = if INTRINSIC-NAME:SYSCALL0
  else intrinsic INTRINSIC:SYSCALL1 = if INTRINSIC-NAME:SYSCALL1
  else intrinsic INTRINSIC:SYSCALL2 = if INTRINSIC-NAME:SYSCALL2
  else intrinsic INTRINSIC:SYSCALL3 = if INTRINSIC-NAME:SYSCALL3
  else intrinsic INTRINSIC:SYSCALL4 = if INTRINSIC-NAME:SYSCALL4
  else intrinsic INTRINSIC:SYSCALL5 = if INTRINSIC-NAME:SYSCALL5
  else intrinsic INTRINSIC:SYSCALL6 = if INTRINSIC-NAME:SYSCALL6
  else                                   INTRINSIC-NAME:UNKNOWN
  end end end end end end end end end end end end end end end end end end end end end end end end
end end

proc get-int-type-name
  // int: int-type -> ptr: int-type-name-ptr int: int-type-name-length
  int -> ptr int
in let int-type in
       int-type INT-TYPE:INT  = if INT-TYPE-NAME:INT
  else int-type INT-TYPE:BOOL = if INT-TYPE-NAME:BOOL
  else                             INT-TYPE-NAME:UNKNOWN
  end end
end end

proc get-int-type-sizeof
  // int: int-type -> int: int-type-sizeof
  int -> int
in let int-type in
       int-type INT-TYPE:INT  = if INT-TYPE-SIZE:INT
  else int-type INT-TYPE:BOOL = if INT-TYPE-SIZE:BOOL
  else                             INT-TYPE-SIZE:UNKNOWN
  end end
end end

macro fput-type let type file in
  // int: type file-desc: file-desc
  // Prints a type.

  type get-type-name file fputs
end endmacro

macro fput-keyword let keyword file in
  // int: keyword file-desc: file-desc
  // Prints a keyword.

  keyword get-keyword-name file fputs
end endmacro

macro fput-intrinsic let intrinsic file in
  // int: intrinsic file-desc: file-desc
  // Prints an intrinsic.

  intrinsic get-intrinsic-name file fputs
end endmacro

macro fput-int-type let int-type file in
  // int: int-type file-desc: file-desc
  // Prints an intrinsic type.

  int-type get-int-type-name file fputs
end endmacro

proc fput-token
  // int: token-type [int|ptr]: token-arg file-desc: file-desc
  int int file-desc ->
in let token-type token-arg file_ in
  token-type file_ fput-type " '" file_ fputs

  token-type TOKEN-TYPE:NAME = if
    token-arg token-arg mlength file_ fputs
  else token-type TOKEN-TYPE:INTEGER = if
    token-arg file_ fputi
  else token-type TOKEN-TYPE:KEYWORD = if
    token-arg file_ fput-keyword
  else token-type TOKEN-TYPE:INTRINSIC = if
    token-arg file_ fput-intrinsic
  else token-type TOKEN-TYPE:STRING = if
    token-arg token-arg mlength file_ fputs
  else token-type TOKEN-TYPE:INT-TYPE = if
    token-arg file_ fput-int-type
  else
    token-arg file_ fputi
  end end end end end end

  "'" file_ fputs
end end

proc get-type-size-modifier
  // int: int-type -> ptr: int-type-size-mod-address int: int-type-size-mod-length
  int -> ptr int
in get-int-type-sizeof let size in
       size 1 = if "byte"
  else size 2 = if "word"
  else size 4 = if "dword"
  else size 8 = if "qword"
  else             "<unknown>"
  end end end end
end end

include "dynamic/utils.corth"
include "linux_x86/io/output.corth"
include "core/stack.corth"

include "enums.corth"

macro sizeof(position) 16 endmacro
macro sizeof(address)  48 endmacro

macro addr:path   0 + endmacro  // The path of the file that generated this token.
macro addr:prev   8 + endmacro  // The previous token address which was a macro name and caused this token to be generated.
macro addr:start 16 + endmacro  // The start position of this token.
macro addr:end   32 + endmacro  // The end position of this token.

proc generate-address
  // ptr: file-name ptr: previous int: start int: end -> ptr: address
  ptr ptr int int -> ptr
  // Returns a dynamicly-placed object to store the address of token.
in
  sizeof(address) malloc let address in
    address isn-null if
      // Store the arguments.
      address addr:end   !64
      address addr:start !64
      address addr:prev  !64
      address addr:path  !64
    else drop drop drop drop end

    // Return the address.
    address
  end
end


proc seek-line-rev
  // file-desc: file -> int: location
  file-desc -> int
  // Moves the file handle to the beginning of the line, or the beginning of the file if there are no newline characters before the handle.
  // TODO: This procedure could be improved using a bigger buffer.
in let file in
  memory buffer 1 in
    while true do
      file ftell is-zero if 0 return end
      file -1 SEEK-WHENCE:CUR lseek
      buffer 1 file fgets drop
      buffer @8 '\n' = if inc return end drop
      file -1 SEEK-WHENCE:CUR lseek drop
    end
  end
end 0 end  // dummy


macro fput-file:BUFFER-SIZE 1024 endmacro
proc fput-file
  // file-desc: from file-desc: to ->
  file-desc file-desc ->
  // Copies the contents of a file to another file.
in let from to in
  memory buffer fput-file:BUFFER-SIZE in
    while
      buffer fput-file:BUFFER-SIZE from fgets let read in
        buffer read to fputs
        read fput-file:BUFFER-SIZE =
      end
    do end
  end
end end

proc fput-file-length
  // file-desc: from int: length file-desc: to ->
  file-desc int file-desc ->
  // Copies the contents of a file to another file.
  // The total number of bytes read is less than or equal to length.
in let from length to in
  memory buffer fput-file:BUFFER-SIZE in
    length while let rem in
      buffer fput-file:BUFFER-SIZE rem min2 from fgets let read in
        buffer read to fputs
        rem read -
        read fput-file:BUFFER-SIZE =
      end
    end do end drop
  end
end end

proc fput-file-line
  // file-desc: from file-desc: to ->
  file-desc file-desc ->
  // Copies the contents of a file to another file until it finds a newline character or reachs end of file.
in let from to in
  memory buffer fput-file:BUFFER-SIZE in
    while
      buffer fput-file:BUFFER-SIZE from fgets let read in buffer read + let last in
        buffer while peek i in
          i @8 '\n' != i last < &
        end do inc end buffer - inc let put in
          buffer put to fputs
          put fput-file:BUFFER-SIZE =
        end
      end end
    do end
  end
end end


macro get-char-line-no:BUFFER-SIZE 256 endmacro
proc get-char-line-no
  // int: position file-desc: file -> int: char-no int: line-no
  int file-desc -> int int
in let position file in
  memory buffer  get-char-line-no:BUFFER-SIZE and
         char-no sizeof(int)                  and
         line-no sizeof(int)                  in

    0 char-no !64
    1 line-no !64

    while
      buffer position file ftell - get-char-line-no:BUFFER-SIZE min2 file fgets buffer + let buffer-end in
        buffer while dup buffer-end < do peek i in
          i @8 '\n' = if
            0 char-no !64
            line-no @inc64
          else
            char-no @inc64
          end
        end inc end drop

        // Keep iterating if the buffer was filled.
        buffer-end buffer get-char-line-no:BUFFER-SIZE + =
      end
    do end

    char-no @64 line-no @64
  end
end end


macro fput-here:MARK-BEG "\x1b[91m" endmacro
macro fput-here:MARK-END "\x1b[0m"  endmacro
proc fput-here
  // ptr: address file-desc: log-stream ->
  ptr file-desc ->
in let address log-stream in
  address addr:path @64 address addr:prev @64 address addr:start @64 address addr:end @64 let path prev start _end in
    path fopen-r let file in
      file isn-pos if
        path path mlength log-stream fputs ":<file-unavailable>\n" log-stream fputs
      else
        // Print the flie path and the line number.
        start file get-char-line-no let char-no line-no in
          path path mlength log-stream fputs ":" log-stream fputs
          line-no log-stream fputu ":\n" log-stream fputs
        end

        // Move the file handle to the beginning of the line.
        file seek-line-rev let line-start in
          // Print the part of the line that is not marked.
          file start line-start - log-stream fput-file-length

          // Print the marked part.
          fput-here:MARK-BEG log-stream fputs
          file _end start - log-stream fput-file-length
          fput-here:MARK-END log-stream fputs

          // Print the remaining of the line.
          file log-stream fput-file-line
        end

        file fclose drop
      end
    end

    // If the address was extended by a macro call, print the address of the macro call.
    address addr:prev @64 isn-null if
      address addr:prev @64 log-stream fput-here
    end
  end
end end


macro sizeof(log)  24 endmacro
macro log:type    0 + endmacro
macro log:arg1    8 + endmacro
macro log:arg2   16 + endmacro


// Exits with error code.
proc unescapable -> in 1 exit drop end


proc generate-log0
  // int: type -> ptr: log-item
  int -> ptr
in sizeof(log) malloc let object in
  object isn-null if
    object log:type !64
  else drop end
object end end


proc generate-log1
  // int: arg1 int: type -> ptr: log-item
  int int -> ptr
in sizeof(log) malloc let object in
  object isn-null if
    object log:type !64
    object log:arg1 !64
  else drop drop end
object end end


proc generate-log2
  // int: arg1 int: arg2 int: type -> ptr: log-item
  int int int -> ptr
in sizeof(log) malloc let object in
  object isn-null if
    object log:type !64
    object log:arg2 !64
    object log:arg1 !64
  else drop drop drop end
object end end


namespace LOG-TYPE
// -------- Info messages (prefix: 0xxxx) --------

// -------- Warnings (prefix: 1xxxx) --------

// -------- Error messages (prefix: 2xxxx) --------

//// General errors (prefix: 20xxx)
macro CANNOT-OPEN-OUT   0x20000 endmacro  //
macro CANNOT-CREAT-OUT  0x20001 endmacro  //

//// Lexer errors (prefix: 21xxx)
macro REACHED-EOF       0x21000 endmacro  //
macro REACHED-EOL       0x21001 endmacro  //
macro TOKEN-TOO-LONG    0x21002 endmacro  //
macro INVALID-ESCAPE    0x21003 endmacro  // log-item: reason
macro NOT-HEX-DIGIT     0x21004 endmacro  //
macro NOT-ESCAPE-CHAR   0x21005 endmacro  //
macro INV-STR-LIT       0x21006 endmacro  // log-item: reason
macro INV-INT-LIT       0x21007 endmacro  //
macro INV-CHAR-LIT      0x21008 endmacro  //
macro SYNTAX-ERROR      0x21009 endmacro  // log-item: reason ptr: address

//// Parsing errors (prefix: 22xxx)
macro NO-TOKEN          0x22000 endmacro  // log-item: reason
macro UNXPCT-TYPE       0x22001 endmacro  // ptr: address
macro UNXPCT-KEYWORD    0x22002 endmacro  // ptr: address
macro REC-NAMESPACE     0x22003 endmacro  //
// TODO: Add ELSE-NO-IF
// TODO: Add DO-NO-WHILE
// TODO: Add END-NO-START

//// Compilation errors (prefix: 23xxx)
macro STACK-NOT-MATCH   0x23000 endmacro  // ptr: stack-types ptr: expected-types
macro NOT-ENOUGH-ITEMS  0x23001 endmacro  //
macro INV-ITEM-TYPE     0x23002 endmacro  //
macro INV-ITEM-MODE     0x23003 endmacro  //
macro ERROR-INTRINSIC   0x23004 endmacro  // log-item: reason address: token-address
macro ERROR-KEYWORD     0x23005 endmacro  // log-item: reason address: token-address
macro ERROR-PROC        0x23006 endmacro  // log-item: reason
macro MEM-SIZE-MISMATCH 0x23007 endmacro  //
macro UNREACHABLE       0x23008 endmacro  //
macro REDEF-LOCAL-NAME  0x23009 endmacro  //
macro REDEF-GLOBAL-NAME 0x2300a endmacro  //
macro UNDEF-NAME        0x2300b endmacro  // address: token-address
macro CANNOT-OPEN-SRC   0x2300c endmacro  //
macro TODO-DIR-INCLUDE  0x2300d endmacro  //
macro UNKNOWN-FILE-TYPE 0x2300e endmacro  //
macro CANNOT-FIND-SRC   0x2300f endmacro  //
macro ACCESSED-PEEKED   0x23010 endmacro  //
macro CANNOT-INCLUDE    0x23011 endmacro  // ptr: source-path
macro CANNOT-CALL-PROC  0x23012 endmacro  // address: token-address
macro STACK-SIZE-NOT-EQ 0x23013 endmacro  // ptr: stack-types ptr: expected-types

// -------- Assertions (prefix: 3xxxx) --------
macro MALLOC-FAILED     0x30000 endmacro  //
macro EXT-LEN-INVALID   0x30001 endmacro  //
macro UNKNOWN-MODE      0x30002 endmacro  //
macro UNKNOWN-INTRINSIC 0x30003 endmacro  //
macro UNKNOWN-KEYWORD   0x30004 endmacro  //
macro CANNOT-FIND-VAR   0x30005 endmacro  //

endnamespace


proc fput-types
  // ptr: types file-desc: log-stream ->
  ptr file-desc ->
in let types log-stream in types mlength 8 / let types-length in
  types-length is-zero if "<empty>" log-stream fputs return end

  0 while
    dup types array64:get log-stream fput-int-type
  inc dup types-length < do
    " " log-stream fputs
  end drop
end end end



proc fput-log-item
  // ptr: log-item file-desc: log-stream ->
  ptr file-desc ->
in let log-item log-stream in
  log-item log:type @64
  log-item log:arg1 @64
  log-item log:arg2 @64
  let type arg1 arg2 in
    // Information messages

    // Warnings

    // General errors

    // Lexer errors
    type LOG-TYPE:REACHED-EOF = if
      "error: reached EOF\n" log-stream fputs

    else type LOG-TYPE:REACHED-EOL = if
      "error: reached EOL\n" log-stream fputs

    else type LOG-TYPE:TOKEN-TOO-LONG = if
      "error: token is too long\n" log-stream fputs

    else type LOG-TYPE:INVALID-ESCAPE = if
      "error: escape code is invalid because:\n" log-stream fputs
      arg1 log-stream fput-log-item

    else type LOG-TYPE:NOT-HEX-DIGIT = if
      "error: not an hexadecimal digit\n" log-stream fputs

    else type LOG-TYPE:NOT-ESCAPE-CHAR = if
      "error: invalid escape character\n" log-stream fputs

    else type LOG-TYPE:INV-STR-LIT = if
      "error: could not parse string literal because:\n" log-stream fputs
      arg1 log-stream fput-log-item

    else type LOG-TYPE:INV-INT-LIT = if
      "error: could not parse integer literal\n" log-stream fputs

    else type LOG-TYPE:INV-CHAR-LIT = if
      "error: could not parse character literal\n" log-stream fputs

    else type LOG-TYPE:SYNTAX-ERROR = if
      "error: syntax error\n" log-stream fputs
      arg2 log-stream fput-here
      arg1 log-stream fput-log-item

    // Parser errors
    else type LOG-TYPE:NO-TOKEN = if
      "error: token expected but none available because:\n" log-stream fputs
      arg1 log-stream fput-log-item

    else type LOG-TYPE:UNXPCT-TYPE = if
      "error: unexpected token type\n" log-stream fputs
      arg1 log-stream fput-here

    else type LOG-TYPE:UNXPCT-KEYWORD = if
      "error: unexpected keyword\n" log-stream fputs
      arg1 log-stream fput-here

    else type LOG-TYPE:REC-NAMESPACE = if
      "error: tried to start a namespace scope inside another one\n" log-stream fputs

    // Compilation errors
    else type LOG-TYPE:STACK-NOT-MATCH = if
      "error: stack does not match the expected stack\n" log-stream fputs
      "expected: " log-stream fputs arg1 log-stream fput-types log-stream fputnl
      "got: " log-stream fputs arg2 log-stream fput-types log-stream fputnl

    else type LOG-TYPE:NOT-ENOUGH-ITEMS = if
      "error: stack does not have enough items\n" log-stream fputs

    else type LOG-TYPE:INV-ITEM-TYPE = if
      "error: invalid item type\n" log-stream fputs

    else type LOG-TYPE:INV-ITEM-MODE = if
      "error: invalid item mode\n" log-stream fputs

    else type LOG-TYPE:ERROR-INTRINSIC = if
      "error: could not compile intrinsic\n" log-stream fputs
      arg2 log-stream fput-here
      arg1 log-stream fput-log-item

    else type LOG-TYPE:ERROR-KEYWORD = if
      "error: could not compile keyword\n" log-stream fputs
      arg2 log-stream fput-here
      arg1 log-stream fput-log-item

    else type LOG-TYPE:ERROR-PROC = if
      "error: could not compile procedure because:\n" log-stream fputs
      arg1 log-stream fput-log-item

    else type LOG-TYPE:MEM-SIZE-MISMATCH = if
      "error: load/store size does not match\n" log-stream fputs

    else type LOG-TYPE:UNREACHABLE = if
      "error: end of procedure must be reachable\n" log-stream fputs

    else type LOG-TYPE:REDEF-LOCAL-NAME = if
      "error: local name redefined\n" log-stream fputs

    else type LOG-TYPE:REDEF-GLOBAL-NAME = if
      "error: global name redefined\n" log-stream fputs

    else type LOG-TYPE:UNDEF-NAME = if
      "error: name not defined locally or globally\n" log-stream fputs
      arg1 log-stream fput-here

    else type LOG-TYPE:CANNOT-OPEN-SRC = if
      "error: can not open source file\n" log-stream fputs

    else type LOG-TYPE:TODO-DIR-INCLUDE = if
      "error: directory including is currently not implemented\n" log-stream fputs

    else type LOG-TYPE:CANNOT-FIND-SRC = if
      "error: cannot find source file\n" log-stream fputs

    else type LOG-TYPE:UNKNOWN-FILE-TYPE = if
      "error: unknown file type\n" log-stream fputs

    else type LOG-TYPE:CANNOT-CREAT-OUT = if
      "error: could not create output file\n" log-stream fputs

    else type LOG-TYPE:CANNOT-OPEN-OUT = if
      "error: could not open output file\n" log-stream fputs

    else type LOG-TYPE:ACCESSED-PEEKED = if
      "error: tried to pop peeked item\n" log-stream fputs

    else type LOG-TYPE:CANNOT-INCLUDE = if
      "error: cannot include path\n" log-stream fputs
      arg2 log-stream fput-here
      arg1 log-stream fput-log-item

    else type LOG-TYPE:CANNOT-CALL-PROC = if
      "error: cannot call name\n" log-stream fputs
       arg2 log-stream fput-here
       arg1 log-stream fput-log-item

    else type LOG-TYPE:STACK-SIZE-NOT-EQ = if
      "error: the current local stack size does not match the expected stack size\n" log-stream fputs
      "expected: " log-stream fputs arg1 log-stream fput-types log-stream fputnl
      "got: " log-stream fputs arg2 log-stream fput-types log-stream fputnl

    // Assertions
    else type LOG-TYPE:MALLOC-FAILED = if
      "assertion: malloc failed\n" log-stream fputs

    else type LOG-TYPE:EXT-LEN-INVALID = if
      "assertion: extended array length is not a multiple of 3\n" log-stream fputs

    else type LOG-TYPE:UNKNOWN-INTRINSIC = if
      "assertion: unknown intrinsic id\n" log-stream fputs

    else type LOG-TYPE:UNKNOWN-KEYWORD = if
      "assertion: unknown keyword id\n" log-stream fputs

    else type LOG-TYPE:UNKNOWN-MODE = if
      "assertion: unknown stack item mode\n" log-stream fputs

    else type LOG-TYPE:CANNOT-FIND-VAR = if
      "assertion: can not find variable in the name replace list\n" log-stream fputs

    else
      "unknown\n" log-stream fputs
    end end end end end end end end end end end end end end end end end end end end end end
    end end end end end end end end end end end end end end end end end end end end end
  end
end

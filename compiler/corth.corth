macro malloc:ARRAY-SIZE       0x800000 endmacro
macro malloc:AVAIL-STACK-SIZE 0x100000 endmacro
include "dynamic/malloc.corth"
include "dynamic/utils.corth"

include "linux_x86/subprocess.corth"
include "linux_x86/stdio.corth"
include "linux_x86/timeit.corth"
include "cstr.corth"
include "getopts.corth"

include "compiler.corth"


macro EXIT-SUCCESS 0 endmacro
macro EXIT-ERROR   1 endmacro


memory executable-file-name sizeof(ptr) end

macro put-exe
  executable-file-name @64 dup cstr:len puts
endmacro

macro main.unknown-command
  "error: unknown command '" puts arg1 arg1-length puts "'\n" puts
  EXIT-ERROR exit drop
endmacro

macro main.show-usage
  "usage: " puts put-exe " [OPTIONS]... <command> [OPTIONS]...\n"                                   puts
  "options:\n"                                                                                      puts
  "    -h, --help                       Show this message\n"                                        puts
  "commands:\n"                                                                                     puts
  "    compile <source>                 Compile a .corth source file\n"                             puts
  "    quick-test <sources>...          Try compiling SOURCES\n"                                    puts
  "    bootstrap <source>               Compile Corth executable from source\n"                     puts
endmacro

macro command.quick-test-show-usage
  "usage: " puts put-exe " quick-test [OPTIONS]... [PATHS]...\n"                                    puts
  "Tries to compile the source files (or subpaths of directories).\n"                               puts
  "options:\n"                                                                                      puts
  "    -h, --help                       Show this message\n"                                        puts
  "    --full                           Try compiling all files to executable instead of asm\n"     puts
  "    -i <directory>                   Add DIRECTORY to the set of include paths\n"                puts
endmacro

macro command.compile-show-usage
  "usage: " puts put-exe " compile <source-file> [OPTIONS]...\n"                                    puts
  "Compiles a Corth source code into assembly or executable. Uses NASM to assemble the resulting\n" puts
  "assembly file.\n"                                                                                puts
  "options:\n"                                                                                      puts
  "    -h, --help                       Show this message\n"                                        puts
  "    -i <directory>                   Add DIRECTORY to the set of include paths\n"                puts
  "    -o, --output <path>              Create the executable file at PATH\n"                       puts
  "    --asm                            Compile source file to asm instead of executable\n"         puts
endmacro

macro command.bootstrap-show-usage
   "usage: " puts put-exe " bootstrap <source-directory> [OPTIONS]...\n"                            puts
   "Compiles the Corth source code iteratively, until the output file has no changes. After the\n"  puts
   "compilation is over, does quick tests on the example files.\n"                                  puts
   "options:\n"                                                                                     puts
   "    -h, --help                      Show this message\n"                                        puts
   "    --once                          Compile the source file exactly once, without iteration\n"  puts
   "    --std <path>                    Set PATH of the standard library, must be included\n"       puts
   "    -e, --executable <path>         Set PATH of the Corth executable\n"                         puts
   "    -n, --no-test                   Do not test the examples directory\n"                       puts
endmacro


proc move-file
  // ptr: from ptr: to
  ptr ptr ->
in let from to in
  memory copy-infop sizeof(siginfo_t) in
    subprocess:init
      "/bin/mv"  drop subprocess:file-name
      from            subprocess:add-option
      to              subprocess:add-option
    copy-infop subprocess:_end

    copy-infop 8 + @32 CLD_EXITED != copy-infop 24 + @32 isn-zero | if
      "error: could not move " eputs from cstr:str eputs eputnl
      EXIT-ERROR exit drop
    end

    "info: moved " puts from cstr:str puts " to " puts to cstr:str puts putnl
  end
end end


proc copy-file
  // ptr: from ptr: to
  ptr ptr ->
in let from to in
  memory copy-infop sizeof(siginfo_t) in
    subprocess:init
      "/bin/cp"  drop subprocess:file-name
      from            subprocess:add-option
      to              subprocess:add-option
    copy-infop subprocess:_end

    copy-infop 8 + @32 CLD_EXITED != copy-infop 24 + @32 isn-zero | if
      "error: could not copy " eputs from cstr:str eputs eputnl
      EXIT-ERROR exit drop
    end

    "info: copied " puts from cstr:str puts " to " puts to cstr:str puts putnl
  end
end end


proc make-directory
  // ptr: path
  ptr ->
in let path in
  memory mkdir-infop sizeof(siginfo_t) in
    subprocess:init
      "/bin/mkdir"  drop subprocess:file-name
      path               subprocess:add-option
    mkdir-infop subprocess:_end

    mkdir-infop 8 + @32 CLD_EXITED != mkdir-infop 24 + @32 isn-zero | if
      "error: could not create directory " eputs path cstr:str eputs eputnl
      EXIT-ERROR exit drop
    end

    "info: created directory " puts path cstr:str puts putnl
  end
end end


proc recursive-force-remove
  // ptr: path
  ptr ->
in let path in
  memory rm-infop sizeof(siginfo_t) in
    subprocess:init
      "/bin/rm"  drop subprocess:file-name
      "-rf"      drop subprocess:file-name
      path            subprocess:add-option
    rm-infop subprocess:_end

    rm-infop 8 + @32 CLD_EXITED != rm-infop 24 + @32 isn-zero | if
      "error: could not remove " eputs path cstr:str eputs eputnl
      EXIT-ERROR exit drop
    end

    "info: created directory " puts path cstr:str puts putnl
  end
end end


// ptr: message int: message-length
macro compile:info-time
  timeit:_break let seconds nanoseconds in
    "info: " STDOUT fputs STDOUT fputs " took " STDOUT fputs
    seconds STDOUT fputu " seconds " STDOUT fputs
    nanoseconds 1000000 / STDOUT fputu " milliseconds.\n" STDOUT fputs
  end
endmacro


proc compile
  // ptr: source-name ptr: output-name ptr: include-paths-set bool: full-compilation -> bool: successful
  ptr ptr ptr bool -> bool
  // NOTE: source-name must be a file.
in let source-name output-name include-paths-set full-compilation in
  timeit:init

    // Compile Corth file to NASM file.
    source-name
    "output.asm" drop
    include-paths-set
    compile-nasm dup isn-null if
      STDOUT fput-log-item
      false return
    end drop

    // Show compilation time information.
    "compiling to asm" compile:info-time

    // Keep going if we are in full-compilation mode.
    full-compilation ! if true return end

    memory nasm-infop sizeof(siginfo_t) and
           ld-infop   sizeof(siginfo_t) in

      // Execute NASM.
      subprocess:init
        "/bin/nasm"  drop subprocess:file-name
        "output.asm" drop subprocess:add-option
        "-felf64"    drop subprocess:add-option
        "-o"         drop subprocess:add-option
        "output.o"   drop subprocess:add-option
      nasm-infop subprocess:_end

      // Show nasm time information.
      "nasm" compile:info-time

      nasm-infop 8 + @32 CLD_EXITED != nasm-infop 24 + @32 isn-zero | if
        "error: NASM failed\n" eputs
        false return
      end

      // Execute linker.
      subprocess:init
        "/bin/ld"   drop subprocess:file-name
        "output.o"  drop subprocess:add-option
        "-o"        drop subprocess:add-option
        output-name      subprocess:add-option
      ld-infop subprocess:_end

      // Show ld time information.
      "ld" compile:info-time

      ld-infop 8 + @32 CLD_EXITED != ld-infop 24 + @32 isn-zero | if
        "error: linker failed\n" eputs
        false return
      end
    end
  timeit:_end
end true end


proc compile-recursive
  // ptr: source-name ptr: output-name ptr: include-paths-set bool: full-compilation -> bool: successful
  ptr ptr ptr bool -> bool
  // If source-name is a directory, compiles all subpaths of it.
in let source-name output-name include-paths-set full-compilation in
  memory stats sizeof(stat) in
    source-name stats stat drop

    // Check if user has access to the path:
    source-name ACCESS-MODE:R_OK access isn-zero if
      "error: can not access file '" eputs source-name source-name mlength eputs "'\n" eputs
      EXIT-ERROR exit drop
    end

    stats 24 + @64 S_IFMT && let masked in
      masked S_IFREG = if
        source-name output-name include-paths-set full-compilation compile

      else masked S_IFDIR = if
        source-name diropen-r let directory in
          directory is-neg if
            "error: could not open directory '" eputs source-name cstr:str eputs "'\n" eputs
            false return
          end

          memory buffer 1024 in
            while true do
              directory buffer 1024 getdents64 let length in
                length is-neg if
                  "error: 'getdents64' failed\n" eputs
                  EXIT-ERROR exit drop
                end

                length is-zero if true return end

                buffer while dup buffer length + < do let _subpath in
                  _subpath 19 + "."  drop cstr:cmp isn-zero
                  _subpath 19 + ".." drop cstr:cmp isn-zero & if
                    source-name source-name mlength dec _subpath 19 + cstr:str path:merge2-cstr let subpath in
                      subpath output-name include-paths-set full-compilation compile-recursive ! if false return end
                    end
                  end
                _subpath _subpath 16 + @16 + end end drop
              end
            end
          end
        end
        false // dummy

      else
        "error: file '" eputs "' is neither a file or a directory\n" eputs
        EXIT-ERROR exit drop
        false // dummy
      end end
    end
  end
end end


proc command.quick-test -> in
  getopts.clear

  getopts.reset-length

  "h#help#full#i$" drop getopts.generate ! if
    "error: 'getopts.generate' failed\n" eputs
    EXIT-ERROR exit drop
  end

  memory test-paths        sizeof(ptr)  and
         include-paths-set sizeof(ptr)  and
         full-compilation  sizeof(bool) in

    list64:init test-paths !64
    list64:init include-paths-set !64

    test-paths @64 is-null if
      "error: 'list64:init' failed\n" eputs
      EXIT-ERROR exit drop
    end

    include-paths-set @64 is-null if
      "error: 'list64:init' failed\n" eputs
      EXIT-ERROR exit drop
    end

    full-compilation !reset

    while true do
      getopts.parse let type arg1 arg1-length arg2 arg2-length error in
        error        if EXIT-ERROR   exit drop end
        type O-END = if                  break end

        type O-INPLACE = if
          arg1 arg1-length inc to-dynamic8 test-paths list64:append

        else type O-SWITCH = if
            arg1 arg1-length "h"    memcmp8-wl is-zero
            arg1 arg1-length "help" memcmp8-wl is-zero | if
              command.quick-test-show-usage
              EXIT-SUCCESS exit drop

            else arg1 arg1-length "full" memcmp8-wl is-zero if
              full-compilation @bool if
                "error: '--full' can not be used more than once\n" puts
                EXIT-ERROR exit drop
              end

              full-compilation !set

            else EXIT-ERROR exit drop end end

        else type O-ARGUMENT = if
          arg1 arg1-length "i"            memcmp8-wl is-zero if
            arg2 arg2-length inc to-dynamic8 include-paths-set str-set8:add drop

          else EXIT-ERROR exit drop end

        else EXIT-ERROR exit drop end end end // impossible
      end
    end

    0 while dup test-paths list64:length < do dup test-paths list64:get let test-file in
      test-file
      "/dev/null" drop
      include-paths-set
      full-compilation @bool
      compile-recursive ! if EXIT-ERROR exit drop end
    end inc end drop

    // Deallocate 'include-paths-set'.
    include-paths-set list64:mfree drop
  end

  EXIT-SUCCESS exit drop
end


proc command.bootstrap -> in
  getopts.clear

  "h#help#once#e$executable$std$n#no-test#" drop getopts.generate ! if
    "error: 'getopts.generate' failed\n" eputs
    EXIT-ERROR exit drop
  end

  // source is the directory that the compiler.corth is in.
  // This directory should contain every file that the compiler needs except the standard library.

  memory source          sizeof(ptr)  and
         executable      sizeof(ptr)  and
         std             sizeof(ptr)  and
         once            sizeof(bool) and
         ignore-examples sizeof(bool) in

    NULLPTR source !64
    NULLPTR std    !64

    executable-file-name @64 executable !64

    once !reset
    ignore-examples !reset

    while true do
      getopts.parse let type arg1 arg1-length arg2 arg2-length error in
        error        if EXIT-ERROR   exit drop end
        type O-END = if break                  end

        type O-INPLACE = if
          source @64 is-null if
            arg1 arg1-length inc to-dynamic8 source !64
          else
            command.bootstrap-show-usage
            EXIT-ERROR exit drop
          end

        else type O-SWITCH = if
          arg1 arg1-length "h"    memcmp8-wl is-zero
          arg1 arg1-length "help" memcmp8-wl is-zero | if
            command.bootstrap-show-usage
            EXIT-SUCCESS exit drop

          else arg1 arg1-length "once" memcmp8-wl is-zero if
            once @bool if
              "error: '--once' can not be used more than once\n" puts
              EXIT-ERROR exit drop
            end

            once !set

          else arg1 arg1-length "n"       memcmp8-wl is-zero
               arg1 arg1-length "no-test" memcmp8-wl is-zero | if
            ignore-examples @bool if
              "error: '--no-test' can not be used more than once\n" puts
              EXIT-ERROR exit drop
            end

            ignore-examples !set

          else EXIT-ERROR exit drop end end end // impossible

        else type O-ARGUMENT = if
          arg1 arg1-length "e"          memcmp8-wl is-zero
          arg1 arg1-length "executable" memcmp8-wl is-zero | if
            arg2 arg2-length inc to-dynamic8 executable !64

          else arg1 arg1-length "std" memcmp8-wl is-zero if
            arg2 arg2-length inc to-dynamic8 std !64

          else EXIT-ERROR exit drop end end // impossible

        else EXIT-ERROR exit drop end end end // impossible
      end
    end

    source @64 is-null if
      command.bootstrap-show-usage
      EXIT-ERROR exit drop
    end

    std @64 is-null if
      "error: bootstrap requires --std\n" eputs
      EXIT-ERROR exit drop
    end

    executable @64 "./old" drop copy-file

    source @64 cstr:str "corth.corth" path:merge2-cstr let source-file-path in
      memory compiler-infop sizeof(siginfo_t) and
             diff-infop     sizeof(siginfo_t) in

        1 while
          "info: starting iteration " puts dup putu putnl

          subprocess:init
            "./old"     drop subprocess:file-name
            "compile"   drop subprocess:add-option
            source-file-path subprocess:add-option
            "-o"        drop subprocess:add-option
            "./new"     drop subprocess:add-option
            "-i"        drop subprocess:add-option
            std @64          subprocess:add-option
            "-i"        drop subprocess:add-option
            source @64       subprocess:add-option
          compiler-infop subprocess:_end

          compiler-infop 8 + @32 CLD_EXITED != compiler-infop 24 + @32 isn-zero | if
            "error: compilation failed\n" eputs
            EXIT-ERROR exit drop
          end

          "info: successfully compiled\n" puts

          subprocess:init
            "/bin/diff" drop subprocess:file-name
            "./old"     drop subprocess:add-option
            "./new"     drop subprocess:add-option
          diff-infop subprocess:_end

          diff-infop 8 + @32 CLD_EXITED != if
            "error: diff did not exit\n" eputs
            EXIT-ERROR exit drop
          end

        diff-infop 24 + @32 isn-zero once @8 is-zero & do
          "info: ./old and ./new differ, reiterating...\n" puts

          "./new" drop "./old" drop move-file
        inc end

        "info: reached stability in " puts putu " tries\n" puts

        ignore-examples @bool ! if
          "info: starting tests...\n" puts

          memory quick-test-infop sizeof(siginfo_t) in
            subprocess:init
              "./new"      drop subprocess:file-name
              "quick-test" drop subprocess:add-option
              "./examples" drop subprocess:add-option
              "-i"         drop subprocess:add-option
              std @64           subprocess:add-option
            quick-test-infop subprocess:_end

            quick-test-infop 8 + @32 CLD_EXITED != quick-test-infop 24 + @32 isn-zero | if
              "error: quick tests failed\n" eputs
              EXIT-ERROR exit drop
            end
          end

          "info: tests succeeded\n" puts
        else
          "info: skipping tests...\n" puts
        end

        "./new" drop executable @64 move-file
      end

      // Deallocate 'source-file-path'.
      source-file-path mfree drop
    end
  end

  EXIT-SUCCESS exit drop
end


proc command.compile -> in
  getopts.clear

  "h#help#i$o$output$asm#" drop getopts.generate ! if
    "error: 'getopts.generate' failed\n" eputs
    EXIT-ERROR exit drop
  end

  memory source-file       sizeof(ptr)  and
         output-file       sizeof(ptr)  and
         include-paths-set sizeof(ptr)  and
         asm-only          sizeof(bool) in

    NULLPTR       source-file !64
    "output" drop output-file !64

    list64:init include-paths-set !64

    include-paths-set @64 is-null if
      "'list64:init' failed\n" puts
      EXIT-ERROR exit drop
    end

    asm-only !reset

    while true do
      getopts.parse let type arg1 arg1-length arg2 arg2-length error in
        error        if EXIT-ERROR   exit drop end
        type O-END = if break                  end

        type O-INPLACE = if
          source-file @64 is-null if
            arg1 arg1-length inc to-dynamic8 source-file !64
          else
            command.compile-show-usage
            EXIT-ERROR exit drop
          end

        else type O-SWITCH = if
          arg1 arg1-length "h"    memcmp8-wl is-zero
          arg1 arg1-length "help" memcmp8-wl is-zero | if
            command.compile-show-usage
            EXIT-SUCCESS exit drop

          else arg1 arg1-length "asm" memcmp8-wl is-zero if
            asm-only @bool if
              "error: '--asm' can not be used more than once\n" puts
              EXIT-ERROR exit drop
            end

            asm-only !set

          else EXIT-ERROR exit drop end end // impossible

        else type O-ARGUMENT = if
          arg1 arg1-length "i"            memcmp8-wl is-zero if
            arg2 arg2-length inc to-dynamic8 include-paths-set str-set8:add drop

          else arg1 arg1-length "o"      memcmp8-wl is-zero
               arg1 arg1-length "output" memcmp8-wl is-zero | if
            arg2 output-file !64

          else EXIT-ERROR exit drop end end // impossible

        else EXIT-ERROR exit drop end end end // impossible
      end
    end

    source-file @64 is-null if
      command.compile-show-usage
      EXIT-ERROR exit drop
    end

    source-file @64
    output-file @64
    include-paths-set
    asm-only @bool !
    compile ! if EXIT-ERROR exit drop end

    // Deallocate 'include-paths-set'.
    include-paths-set list64:mfree drop
  end

  EXIT-SUCCESS exit drop
end


proc main
  int int -> int
in let argc argv in
  // Initialize malloc.
  malloc:init

  getopts.reset-length

  argv @64 executable-file-name !64
  argv 8 + getopts.set-arguments

  "h#help#" drop getopts.generate ! if
    "error: 'getopts.generate' failed\n" eputs
    EXIT-ERROR exit drop
  end

  while true do
    getopts.parse let type arg1 arg1-length arg2 arg2-length error in
      error        if EXIT-ERROR   exit drop end
      type O-END = if                  break end

      type O-INPLACE = if
             arg1 arg1-length "compile"    memcmp8-wl is-zero if command.compile
        else arg1 arg1-length "quick-test" memcmp8-wl is-zero if command.quick-test
        else arg1 arg1-length "bootstrap"  memcmp8-wl is-zero if command.bootstrap
        else
          "error: unknown command '" puts arg1 arg1-length puts putnl
          EXIT-ERROR exit drop
        end end end

      else type O-SWITCH = if
        arg1 arg1-length "h"    memcmp8-wl is-zero
        arg1 arg1-length "help" memcmp8-wl is-zero | if
          main.show-usage
          EXIT-SUCCESS exit drop

        else EXIT-ERROR exit drop end // impossible

      else type O-ARGUMENT = if

      else EXIT-ERROR exit drop end end end // impossible
    end
  end

  main.show-usage
end EXIT-ERROR end

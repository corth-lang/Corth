include "linux_x86/stdio.corth"
include "core/stack.corth"

macro malloc:ARRAY-SIZE       0x4000 endmacro
macro malloc:AVAIL-STACK-SIZE 0x100  endmacro
include "dynamic/debug_malloc.corth"

memory index sizeof(int) end

proc allocate-space
  int -> ptr
in let size in
  size index @64 malloc let object in
    object mlength size != if
      "[INFO] Size does not match.\n" puts
      1 exit drop
    else
      "[INFO] Successfully allocated object with index " puts index @64 puti ".\n" puts
      index @inc64
    end

    STDOUT debug-dynamic-memory
    object
  end
end end

proc deallocate-space
  ptr ->
in let container in
  container debug-malloc:get-tag let tag in
    container mfree if
      "[INFO] Successfully deallocated object with index " puts tag puti ".\n" puts
    else
      "[INFO] Could not deallocate object.\n" puts
      1 exit drop
    end
  end

  STDOUT debug-dynamic-memory
end end

proc main
  int int -> int
in let argc argv in
  malloc:init
  0 index !64

  STDOUT debug-dynamic-memory

  56 allocate-space let a in
    56 allocate-space let b in
      56 allocate-space let c in
        56 allocate-space let d in
          56 allocate-space let e in
            56 allocate-space let f in
              56 allocate-space let g in
                56 allocate-space let h in
                  b deallocate-space
                  d deallocate-space
                  f deallocate-space
                  h deallocate-space
                  c deallocate-space
                  a deallocate-space
                end
              end
            end
          end
        end
      end
    end
  end
end 0 end
